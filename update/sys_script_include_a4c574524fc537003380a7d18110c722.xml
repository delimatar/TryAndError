<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_276349_tryanderr.CompanyVO</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CompanyVO</name>
        <script><![CDATA[var CompanyVO = Class.create();
CompanyVO.prototype = {
	fields : "client.clientid,company,city",
	windowSize : 4,
    initialize: function() {
    },

	getWindowSize: function() {
		return this.windowSize;
	},
	
	setWindowSize: function(windowSize) {
		this.windowSize = windowSize;
	},
		
	getFields: function() {
		return this.fields;
	},
		
	getTitle: function() {
		return "List of Companies";
	},
	
	getLabels: function() {
		var labels = {};
		labels.clientid = "Client";
		labels.company = "Company";
		labels.city = "City";
		return labels;
	},
	
	getFieldTypes: function() {
		var field_types = {};
		field_types.clientid = { label: 'Client', type: 'string', name: 'client.clientid', order : 1};
		field_types.company = { label: 'Company', type: 'string', name: 'company', order : 2 };
		field_types.city = { label: 'City', type: 'string', name: 'city', order : 3 };
		return field_types;
	},
	
	getList: function(filterObject) {
		var result = {};
		var table = "x_276349_tryanderr_company";
		var list = [];
		var gr = new GlideRecord(table);
		if(filterObject.query) {
			filterObject.pageIndex = 0;
			gr.addEncodedQuery(filterObject.query);
		}	
		if (filterObject.orderBy) {
			if (filterObject.direction == "asc") {
				gr.orderBy(filterObject.orderBy);
			}
			if (filterObject.direction == "desc") {
				gr.orderByDesc(filterObject.orderBy);
			}
		}	
		var firstRow = filterObject.pageIndex * this.getWindowSize();
		var lastRow = (filterObject.pageIndex + 1) * this.getWindowSize();
	
		gr.chooseWindow(firstRow, lastRow);
		gr.query();
		result.rowCount = gr.getRowCount();
		while (gr.next()) {
			var record = {};
			$sp.getRecordElements(record, gr, this.fields);
			record.sys_id = gr.getValue('sys_id');
			list.push(record);
		}
		
		result.list = list;
		result.numPages = Math.ceil(result.rowCount / this.getWindowSize());
		if(lastRow <= result.rowCount) {
			result.message = "Rows " + (firstRow + 1) + " - " + lastRow + " of " + result.rowCount;
		} else {
			result.message = "Rows " + (firstRow + 1) + " - " + result.rowCount + " of " + result.rowCount;
		}	
		
		return result;
	},
	
    type: 'CompanyVO'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-04-28 11:32:26</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a4c574524fc537003380a7d18110c722</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>CompanyVO</sys_name>
        <sys_package display_value="TryAndError" source="x_276349_tryanderr">16e78fcd4f9d23003380a7d18110c73d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="TryAndError">16e78fcd4f9d23003380a7d18110c73d</sys_scope>
        <sys_update_name>sys_script_include_a4c574524fc537003380a7d18110c722</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-04-29 07:31:06</sys_updated_on>
    </sys_script_include>
</record_update>
